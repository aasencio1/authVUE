name: Deploy to EC2 (Staging) â€” monorepo

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"
      deploy_backend:
        description: "Deploy backend?"
        type: boolean
        default: true
      deploy_frontend:
        description: "Deploy frontend?"
        type: boolean
        default: true

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ vars.FRONTEND_URL }}
    timeout-minutes: 30

    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Sanity check (SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            'echo HOME=$HOME; hostname'

      # tools + clone/update (sin mkdir del repo)
      - name: Bootstrap EC2 (tools + clone/update)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          REPO_URL="https://github.com/${{ github.repository }}.git"
          REPO_NAME="$(basename -s .git "$REPO_URL")"
          APP_DIR="$HOME/$REPO_NAME"
          BRANCH="${{ github.event.inputs.branch }}"

          # herramientas
          if ! command -v git  >/dev/null; then sudo apt update && sudo apt install -y git; fi
          if ! command -v node >/dev/null; then curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - && sudo apt install -y nodejs; fi
          if ! command -v pm2  >/dev/null; then sudo npm i -g pm2; fi
          if ! command -v nginx >/dev/null; then sudo apt install -y nginx; fi

          # clonar si falta; si existe, actualizar
          if [ ! -d "$APP_DIR/.git" ]; then
            cd "$HOME"
            git clone "$REPO_URL"
          fi

          cd "$APP_DIR"
          git fetch origin "$BRANCH" || true
          git checkout "$BRANCH" || git checkout -B "$BRANCH" "origin/$BRANCH"
          git pull --ff-only origin "$BRANCH" || true
          EOF

      # .env del backend (se asume existe carpeta backend del repo)
      - name: Write backend .env on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            'APP_DIR="$HOME/$(basename -s .git https://github.com/${{ github.repository }}.git)"; cat > "$APP_DIR/backend/.env" << "ENVEOF"
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ vars.GOOGLE_CALLBACK_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          PORT=${{ vars.PORT }}
          JWT_EXPIRES=${{ vars.JWT_EXPIRES }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ENVEOF'

      - name: Deploy BACKEND
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          APP_DIR="$HOME/$(basename -s .git https://github.com/${{ github.repository }}.git)"
          cd "$APP_DIR/backend"
          npm ci || npm install
          # npm run build  # si aplica
          pm2 restart backend || pm2 start npm --name backend -- start
          pm2 save
          EOF

      - name: Deploy FRONTEND
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          APP_DIR="$HOME/$(basename -s .git https://github.com/${{ github.repository }}.git)"
          cd "$APP_DIR/frontend"
          npm ci || npm install
          npm run build
          sudo rm -rf /var/www/html/*
          sudo cp -r dist/* /var/www/html/
          sudo systemctl reload nginx || sudo systemctl restart nginx
          EOF

      - name: Smoke check
        run: |
          curl -I --max-time 15 ${{ vars.FRONTEND_URL }} || true
