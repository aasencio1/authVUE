name: Deploy to EC2 (Staging) 

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"
      deploy_backend:
        description: "Deploy backend?"
        type: boolean
        default: true
      deploy_frontend:
        description: "Deploy frontend?"
        type: boolean
        default: true

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{ vars.FRONTEND_URL }}

    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Sanity check (SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            'echo HOME=$HOME; hostname; uname -a'

      # ---------- Herramientas + clonar si falta + dejar repo limpio ----------
      - name: Bootstrap EC2 (tools + clone/update)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          REPO_URL="https://github.com/${{ github.repository }}.git"
          REPO_NAME="$(basename -s .git "$REPO_URL")"
          APP_DIR="$HOME/$REPO_NAME"
          BRANCH="${{ github.event.inputs.branch }}"

          # Herramientas base (idempotente)
          if ! command -v git  >/dev/null 2>&1; then sudo apt update && sudo apt install -y git; fi
          if ! command -v node >/dev/null 2>&1; then curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - && sudo apt install -y nodejs; fi
          if ! command -v pm2  >/dev/null 2>&1; then sudo npm i -g pm2; fi
          if ! command -v nginx >/dev/null 2>&1; then sudo apt install -y nginx; fi

          # Clonar si falta
          if [ ! -d "$APP_DIR/.git" ]; then
            cd "$HOME"
            git clone "$REPO_URL"
          fi

          # Dejar la rama limpia y actualizada (ANTES de crear .env)
          cd "$APP_DIR"
          git fetch origin "$BRANCH" || true
          git checkout "$BRANCH" || git checkout -B "$BRANCH" "origin/$BRANCH"
          git reset --hard "origin/$BRANCH"
          git clean -fdx
          EOF

      # ---------- .env del backend (archivo directo dentro del repo) ----------
      - name: Write backend .env on EC2 (simple)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          REPO_URL="https://github.com/${{ github.repository }}.git"
          APP_DIR="$HOME/$(basename -s .git "$REPO_URL")"

          mkdir -p "$APP_DIR/backend"
          # Si hubiera un symlink anterior, reemplázalo por archivo normal
          rm -f "$APP_DIR/backend/.env"

          cat > "$APP_DIR/backend/.env" <<'ENVEOF'
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ vars.GOOGLE_CALLBACK_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          PORT=${{ vars.PORT }}
          JWT_EXPIRES=${{ vars.JWT_EXPIRES }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ENVEOF

          chmod 600 "$APP_DIR/backend/.env"
          EOF

      # ---------- BACKEND: deps (runtime) + PM2 ----------
      - name: Deploy BACKEND
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          REPO_URL="https://github.com/${{ github.repository }}.git"
          APP_DIR="$HOME/$(basename -s .git "$REPO_URL")"
          cd "$APP_DIR/backend"

          # Evita husky en servidores
          export HUSKY=0

          # Si NO compilas TS aquí, instala solo deps de runtime:
          npm ci --omit=dev --no-audit --fund=false || npm install --omit=dev --no-audit --fund=false

          # Si SÍ compilas TS en servidor, usa en su lugar:
          # npm ci --no-audit --fund=false
          # npm run build

          pm2 restart backend || pm2 start npm --name backend -- start
          pm2 save
          EOF

      # ---------- FRONTEND: build + publicar en NGINX ----------
      - name: Deploy FRONTEND
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          REPO_URL="https://github.com/${{ github.repository }}.git"
          APP_DIR="$HOME/$(basename -s .git "$REPO_URL")"
          BRANCH="${{ github.event.inputs.branch }}"

          # Traer últimos cambios SIN limpiar para no borrar backend/.env
          cd "$APP_DIR"
          git fetch origin "$BRANCH" || true
          git checkout "$BRANCH" || git checkout -B "$BRANCH" "origin/$BRANCH"
          git pull --ff-only origin "$BRANCH" || true

          # Build del front (Vue/Vite -> dist/)
          cd "$APP_DIR/frontend"
          npm ci --no-audit --fund=false
          if npm run | grep -q "build-only"; then
            npm run build-only
          else
            npm run build
          fi

          # Publicar
          sudo rm -rf /var/www/html/*
          sudo rsync -av --delete dist/ /var/www/html/
          sudo nginx -t
          sudo systemctl reload nginx || sudo systemctl restart nginx
          EOF

      - name: Smoke check
        run: |
          curl -I --max-time 15 ${{ vars.FRONTEND_URL }} || true
