name: Deploy to EC2 (Staging)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"
      deploy_backend:
        description: "Deploy backend?"
        type: boolean
        default: true
      deploy_frontend:
        description: "Deploy frontend?"
        type: boolean
        default: true

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    # MUY IMPORTANTE: usa el environment 'staging' para leer sus secrets/vars
    environment:
      name: staging
      # opcional: se muestra como link en la UI de Actions
      url: ${{ vars.FRONTEND_URL }}

    timeout-minutes: 30

    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Sanity check (SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "echo Connected to $(hostname) on $(uname -a)"

      # --- Escribe/actualiza el .env del BACKEND en la EC2 ---
      - name: Write backend .env on EC2
        run: |
          cat > .env <<EOF
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ vars.GOOGLE_CALLBACK_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          PORT=${{ vars.PORT }}
          JWT_EXPIRES=${{ vars.JWT_EXPIRES }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
          scp -o StrictHostKeyChecking=no -i key.pem .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/backend/.env
          rm -f .env

      # --- BACKEND ---
      - name: Deploy BACKEND
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        env:
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          BACKEND_DIR="/home/ubuntu/backend"
          BRANCH="${{ github.event.inputs.branch }}"

          # Asegura directorio/repo
          if [ ! -d "$BACKEND_DIR/.git" ]; then
            echo "ERROR: No existe $BACKEND_DIR/.git. Clona el repo una vez en la EC2."
            exit 2
          fi

          cd "$BACKEND_DIR"
          git fetch origin "$BRANCH" || true
          git checkout "$BRANCH" || git checkout -B "$BRANCH" "origin/$BRANCH"
          git pull --ff-only origin "$BRANCH" || true

          # deps + pm2
          npm ci || npm install
          which pm2 >/dev/null 2>&1 || sudo npm i -g pm2
          # si tu backend requiere build (TS, etc.), descomenta:
          # npm run build

          pm2 restart backend || pm2 start npm --name backend -- start
          pm2 save
          EOF

      # --- FRONTEND ---
      - name: Deploy FRONTEND
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        env:
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          FRONTEND_DIR="/home/ubuntu/frontend"
          NGINX_HTML="/var/www/html"
          BRANCH="${{ github.event.inputs.branch }}"

          if [ ! -d "$FRONTEND_DIR/.git" ]; then
            echo "ERROR: No existe $FRONTEND_DIR/.git. Clona el repo una vez en la EC2."
            exit 2
          fi

          cd "$FRONTEND_DIR"
          git fetch origin "$BRANCH" || true
          git checkout "$BRANCH" || git checkout -B "$BRANCH" "origin/$BRANCH"
          git pull --ff-only origin "$BRANCH" || true

          npm ci || npm install
          # Si tu build necesita envs (ej. VITE_API_URL), expórtalas aquí:
          # VITE_API_URL="${{ vars.FRONTEND_API_URL }}" npm run build
          npm run build

          sudo rm -rf "$NGINX_HTML"/*
          sudo cp -r build/* "$NGINX_HTML"/
          sudo systemctl reload nginx || sudo systemctl restart nginx
          EOF

      # --- Check rápido de salud (opcional) ---
      - name: Smoke check
        run: |
          curl -I --max-time 10 ${{ vars.FRONTEND_URL }} || true
